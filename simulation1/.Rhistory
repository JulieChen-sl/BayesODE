sigma<-aux1*v[i]+2*aux3*m[i]*v[i]-aux3*m[i]/(2*Nt[i])+lambda2*delta_t/(2*Nt[i])
miu1<-aux3*m[i]^2+aux2*m[i]+aux5
sigma_star<-v[i]+(aux1-1)*sigma+2*aux3*miu1*sigma-aux3*miu1/(2*Nt[i+1])+lambda2*delta_t/(2*Nt[i+1])
miu2<-m[i]+aux3*miu1^2+(aux2-1)*miu1+aux5
sigma2[i+1]<-0.5*(sigma+sigma_star)
miu[i+1]<-0.5*(miu1+miu2)
m[i+1]<-rnorm(1,miu[i+1],sqrt(sigma2[i+1]/n.track))
v[i+1]<-sigma2[i+1]*rchisq(1,n.track-1)/(n.track-1)
i=i+1
}
yobsv<-cbind(m,v)
return(yobsv)
}
n.data=37;t=24;delta_t<-t/(n.data-1)
n.par<-4 #参数个数
n.track=5;
N0<-1000#细胞个数
filenames1 <- paste("DATA", 1:10000, sep="")
para<-read.csv("para_unif.csv",header=TRUE)
for(i in 1:100)
{
set.seed(i)
theta<-as.numeric(para[i,2:5])
m0<-para[i,6]
yobsv<-generateddata_model(theta,n.data,n.track,m0,N0,delta_t)
write.table(yobsv,paste(filenames1[i], ".csv", sep=""),append=FALSE,col.names=FALSE, sep = " ",eol = "\n")
}
n.data=37
t=24
delta_t<-t/(n.data-1)
source("generateddata_model.R")
n.data=37
t=24
delta_t<-t/(n.data-1)
n.par<-4 #参数个数
n.track=5;
N0<-1000#细胞个数
filenames1 <- paste("DATA", 1:10000, sep="")
para<-read.csv("para_unif.csv",header=TRUE)
theta<-as.numeric(para[i,2:5])
m0<-para[i,6]
yobsv<-generateddata_model(theta,n.data,n.track,m0,N0,delta_t)
source("generateddata_model.R")
n.data=37
t=24
delta_t<-t/(n.data-1)
n.par<-4 #参数个数
n.track=5;
N0<-1000#细胞个数
filenames1 <- paste("DATA", 1:10000, sep="")
for(i in 1:10)
{
set.seed(i)
theta<-as.numeric(para[i,2:5])
m0<-para[i,6]
yobsv<-generateddata_model(theta,n.data,n.track,m0,N0,delta_t)
write.table(yobsv,paste(filenames1[i], ".csv", sep=""),append=FALSE,col.names=FALSE, sep = " ",eol = "\n")
}
para<-read.csv("para_unif.csv",header=TRUE)
for(i in 1:10)
{
set.seed(i)
theta<-as.numeric(para[i,2:5])
m0<-para[i,6]
yobsv<-generateddata_model(theta,n.data,n.track,m0,N0,delta_t)
write.table(yobsv,paste(filenames1[i], ".csv", sep=""),append=FALSE,col.names=FALSE, sep = " ",eol = "\n")
}
library(coda)#for MCMC
library(MASS)
library(truncnorm)
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1")
source("logL_nomissing.R")
source("Gibbs.R")
source("check_convergence.R")
source("accept_rate_com.R")
delta_t<-2/3
n.par<-4
n.track=5
N0<-1000
filenames1 <- paste("output", 1:10000, sep="")
filenames2 <- paste("DATA", 1:100000, sep="")
para<-read.csv("para_unif.csv",header=TRUE)
i<-1
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
theta
m0
yobsv
for(i in 1:10)
{
theta <- as.numeric(para[i,2:5])
m0 <- para[i,6]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
print(f_real)
}
theta <- as.numeric(para[i,2:5])
m0 <- para[i,6]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
i<-1
theta <- as.numeric(para[i,2:5])
m0 <- para[i,6]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
varnames <- paste("mc", 1:10, sep="")
filenames6 <- paste("not_0betaMPSRF_lambda", 1:10000, sep="")
sd_pro<-proposal_sd(yobsv)
sd_pro
n0<-10000
n<-n0+2
assign(varnames[1],value=theta)
assign(varnames[2],value=theta)
assign(varnames[3],value=theta)
assign(varnames[4],value=theta)
flag<-0
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]])
chains[[2]]<-as.mcmc(x.val[[2]])
chains[[3]]<-as.mcmc(x.val[[3]])
chains[[4]]<-as.mcmc(x.val[[4]])
#MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = TRUE)[[2]]
log(2)
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1")
source("logL_nomissing.R")
source("Gibbs.R")
source("check_convergence.R")
source("accept_rate_com.R")
delta_t<-2/3
n.par<-4
n.track=5
N0<-1000
filenames1 <- paste("output", 1:10000, sep="")
filenames2 <- paste("DATA", 1:100000, sep="")
para<-read.csv("para_unif.csv",header=TRUE)
i<-1
theta <- as.numeric(para[i,2:5])
m0 <- para[i,6]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
output_real <- check_convergence(yobsv,n.par,delta_t,n.track)
varnames <- paste("mc", 1:10, sep="")
filenames6 <- paste("not_0betaMPSRF_lambda", 1:10000, sep="")
sd_pro<-proposal_sd(yobsv)
n0<-10000
n<-n0+2
#Given an initial value
set.seed(i)
assign(varnames[1],value=runif(4,0,0.1))
assign(varnames[2],value=c(runif(2,0.9,1),runif(2,0.6,log(2))))
assign(varnames[3],value=c(runif(2,0,0.1),runif(2,0.6,log(2))))
assign(varnames[4],value=c(runif(2,0.9,1),runif(2,0,0.1)))
flag<-0
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]][,3])
chains[[2]]<-as.mcmc(x.val[[2]][,3])
chains[[3]]<-as.mcmc(x.val[[3]][,3])
chains[[4]]<-as.mcmc(x.val[[4]][,3])
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
View(x.val)
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
steady<-matrix(data=NA,nrow=4*n/2,ncol=n.par)
steady[1:(n/2),]<-x.val[[1]]
steady[(n/2+1):n,]<-x.val[[2]]
steady[(n+1):(3*n/2),]<-x.val[[3]]
steady[(3*n/2+1):(2*n),]<-x.val[[4]]
View(steady)
theta
set.seed(i)
assign(varnames[1],value=runif(4,0,0.1))
assign(varnames[2],value=c(runif(2,0.9,1),runif(2,0.6,log(2))))
assign(varnames[3],value=c(runif(2,0,0.1),runif(2,0.6,log(2))))
assign(varnames[4],value=c(runif(2,0.9,1),runif(2,0,0.1)))
mc1
mc2
mc3
mc4
View(x.val)
x.val[[2]]
x.val[[4]]
x.val[[3]]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1")
source("logL_nomissing.R")
source("Gibbs.R")
source("check_convergence.R")
source("accept_rate_com.R")
delta_t<-2/3
n.par<-4
n.track=5
N0<-1000
filenames1 <- paste("output", 1:10000, sep="")
filenames2 <- paste("DATA", 1:100000, sep="")
para<-read.csv("para_unif.csv",header=TRUE)
i<-9
theta <- as.numeric(para[i,2:5])
m0 <- para[i,6]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
varnames <- paste("mc", 1:10, sep="")
filenames6 <- paste("not_0betaMPSRF_lambda", 1:10000, sep="")
sd_pro<-proposal_sd(yobsv)
n0<-10000
n<-n0+2
#Given an initial value
set.seed(i)
assign(varnames[1],value=runif(4,0,0.1))
assign(varnames[2],value=c(runif(2,0.9,1),runif(2,0.6,log(2))))
assign(varnames[3],value=c(runif(2,0,0.1),runif(2,0.6,log(2))))
assign(varnames[4],value=c(runif(2,0.9,1),runif(2,0,0.1)))
flag<-0
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]][,3])
chains[[2]]<-as.mcmc(x.val[[2]][,3])
chains[[3]]<-as.mcmc(x.val[[3]][,3])
chains[[4]]<-as.mcmc(x.val[[4]][,3])
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
View(chains)
theta
chains[[1]][1:50,]
chains[[1]]
View(x.val)
x.val[[1]][1:100,]
x.val[[2]][1:10]
x.val[[2]][1:10,]
x.val[[3]][1:10,]
x.val[[4]][1:10,]
theta
rm(chains)
gc()
if(MPSRF<1.1||(n>5e+06))
# if(MPSRF<1.1||(n>1e+07))
{
if(MPSRF<1.1){flag<-1}
steady<-matrix(data=NA,nrow=4*n/2,ncol=n.par)
steady[1:(n/2),]<-x.val[[1]]
steady[(n/2+1):n,]<-x.val[[2]]
steady[(n+1):(3*n/2),]<-x.val[[3]]
steady[(3*n/2+1):(2*n),]<-x.val[[4]]
num.par<-rep(0,4)
#Determine whether the confidence interval covers the true value
if(theta[1]<=quantile(steady[,1],probs =c(0.025,0.975))[2]&&
theta[1]>=quantile(steady[,1],probs =c(0.025,0.975))[1])
num.par[1]=num.par[1]+1
if(theta[2]<=quantile(steady[,2],probs =c(0.025,0.975))[2]&&
theta[2]>=quantile(steady[,2],probs =c(0.025,0.975))[1])
num.par[2]=num.par[2]+1
if(theta[3]<=quantile(steady[,3],probs =c(0.025,0.975))[2]&&
theta[3]>=quantile(steady[,3],probs =c(0.025,0.975))[1])
num.par[3]=num.par[3]+1
if(theta[4]<=quantile(steady[,4],probs =c(0.025,0.975))[2]&&
theta[4]>=quantile(steady[,4],probs =c(0.025,0.975))[1])
num.par[4]=num.par[4]+1
#confidence interval
confidence.int<-c(quantile(steady[,1],probs =c(0.025,0.975))[1],quantile(steady[,1],probs =c(0.025,0.975))[2],
quantile(steady[,2],probs =c(0.025,0.975))[1],quantile(steady[,2],probs =c(0.025,0.975))[2],
quantile(steady[,3],probs =c(0.025,0.975))[1],quantile(steady[,3],probs =c(0.025,0.975))[2],
quantile(steady[,4],probs =c(0.025,0.975))[1],quantile(steady[,4],probs =c(0.025,0.975))[2])
x<-apply(steady,2,mean)
x.mean<-x[1:4]
f_esti_ex<-f_lambda(x.mean[1],x.mean[2],x.mean[3],x.mean[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
#the length of the confidence interval
int.len<-c(quantile(steady[,1],probs =c(0.025,0.975))[2]-quantile(steady[,1],probs =c(0.025,0.975))[1],
quantile(steady[,2],probs =c(0.025,0.975))[2]-quantile(steady[,2],probs =c(0.025,0.975))[1],
quantile(steady[,3],probs =c(0.025,0.975))[2]-quantile(steady[,3],probs =c(0.025,0.975))[1],
quantile(steady[,4],probs =c(0.025,0.975))[2]-quantile(steady[,4],probs =c(0.025,0.975))[1])
#square error
bias_ex<-c((x.mean[1]-theta[1])^2,(x.mean[2]-theta[2])^2,(x.mean[3]-theta[3])^2,(x.mean[4]-theta[4])^2)
break
}else
{
for(flag2 in 1:4)
{
assign(varnames[flag2],value=x.val[[flag2]])
}
n<-n+n0
rm(x.val)
gc()
}
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]][,3])
chains[[2]]<-as.mcmc(x.val[[2]][,3])
chains[[3]]<-as.mcmc(x.val[[3]][,3])
chains[[4]]<-as.mcmc(x.val[[4]][,3])
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
theta[3]
x.val[[1]][1:10,3]
x.val[[2]][1:10,3]
x.val[[3]][1:10,3]
x.val[[4]][1:10,3]
i<-10
theta <- as.numeric(para[i,2:5])
m0 <- para[i,6]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
varnames <- paste("mc", 1:10, sep="")
filenames6 <- paste("not_0betaMPSRF_lambda", 1:10000, sep="")
sd_pro<-proposal_sd(yobsv)
n0<-10000
n<-n0+2
#Given an initial value
set.seed(i)
assign(varnames[1],value=runif(4,0,0.1))
assign(varnames[2],value=c(runif(2,0.9,1),runif(2,0.6,log(2))))
assign(varnames[3],value=c(runif(2,0,0.1),runif(2,0.6,log(2))))
assign(varnames[4],value=c(runif(2,0.9,1),runif(2,0,0.1)))
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]][,3])
chains[[2]]<-as.mcmc(x.val[[2]][,3])
chains[[3]]<-as.mcmc(x.val[[3]][,3])
chains[[4]]<-as.mcmc(x.val[[4]][,3])
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
i<-2
theta <- as.numeric(para[i,2:5])
m0 <- para[i,6]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
varnames <- paste("mc", 1:10, sep="")
filenames6 <- paste("not_0betaMPSRF_lambda", 1:10000, sep="")
sd_pro<-proposal_sd(yobsv)
n0<-10000
n<-n0+2
#Given an initial value
set.seed(i)
assign(varnames[1],value=runif(4,0,0.1))
assign(varnames[2],value=c(runif(2,0.9,1),runif(2,0.6,log(2))))
assign(varnames[3],value=c(runif(2,0,0.1),runif(2,0.6,log(2))))
assign(varnames[4],value=c(runif(2,0.9,1),runif(2,0,0.1)))
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]][,3])
chains[[2]]<-as.mcmc(x.val[[2]][,3])
chains[[3]]<-as.mcmc(x.val[[3]][,3])
chains[[4]]<-as.mcmc(x.val[[4]][,3])
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
theta[3]
x.val[[1]][1:10,3]
x.val[[2]][1:10,3]
x.val[[3]][1:10,3]
x.val[[4]][1:10,3]
#Given an initial value
set.seed(i)
assign(varnames[1],value=c(runif(2,0,0.1),runif(2,0.2,0.4)))
assign(varnames[2],value=c(runif(2,0.9,1),runif(2,0.6,log(2))))
assign(varnames[3],value=c(runif(2,0,0.1),runif(2,0.6,log(2))))
assign(varnames[4],value=c(runif(2,0.9,1),runif(2,0.2,0.4)))
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]][,3])
chains[[2]]<-as.mcmc(x.val[[2]][,3])
chains[[3]]<-as.mcmc(x.val[[3]][,3])
chains[[4]]<-as.mcmc(x.val[[4]][,3])
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
theta[3]
x.val[[1]][1:10,3]
x.val[[2]][1:10,3]
x.val[[3]][1:10,3]
x.val[[4]][1:10,3]
assign(varnames[1],value=c(runif(2,0,0.1),runif(2,0.2,0.4)))
assign(varnames[2],value=c(runif(2,0.9,1),runif(2,0.6,log(2))))
assign(varnames[3],value=c(runif(2,0,0.1),runif(2,0.6,log(2))))
assign(varnames[4],value=c(runif(2,0.9,1),runif(2,0.2,0.4)))
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]][,3])
chains[[2]]<-as.mcmc(x.val[[2]][,3])
chains[[3]]<-as.mcmc(x.val[[3]][,3])
chains[[4]]<-as.mcmc(x.val[[4]][,3])
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
theta[3]
x.val[[1]][1:10,3]
x.val[[2]][1:10,3]
x.val[[3]][1:10,3]
x.val[[4]][1:10,3]
theta
n.data=37
t=24
delta_t<-t/(n.data-1)
n.par<-4 #参数个数
n.track=5;
source("generateddata_model.R")
n.data=37
t=24
delta_t<-t/(n.data-1)
n.par<-4 #参数个数
n.track=5;
N0<-1000#细胞个数
filenames1 <- paste("DATA", 1:10000, sep="")
para<-read.csv("para_unif.csv",header=TRUE)
for(i in 1:100)
{
set.seed(i)
theta<-as.numeric(para[i,2:5])
m0<-para[i,6]
yobsv<-generateddata_model(theta,n.data,n.track,m0,N0,delta_t)
write.table(yobsv,paste(filenames1[i], ".csv", sep=""),append=FALSE,col.names=FALSE, sep = " ",eol = "\n")
}
i<-13
delta_t<-2/3
n.par<-4
n.track=5
N0<-1000
filenames1 <- paste("output", 1:10000, sep="")
filenames2 <- paste("DATA", 1:100000, sep="")
theta <- as.numeric(para[i,2:5])
m0 <- para[i,6]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
varnames <- paste("mc", 1:10, sep="")
filenames6 <- paste("not_0betaMPSRF_lambda", 1:10000, sep="")
sd_pro<-proposal_sd(yobsv)
n0<-10000
n<-n0+2
#Given an initial value
set.seed(i)
assign(varnames[1],value=c(runif(2,0,0.1),runif(2,0,0.1)))
assign(varnames[2],value=c(runif(2,0.9,1),runif(2,0.6,log(2))))
assign(varnames[3],value=c(runif(2,0,0.1),runif(2,0.6,log(2))))
assign(varnames[4],value=c(runif(2,0.9,1),runif(2,0,0.1)))
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]][,3])
chains[[2]]<-as.mcmc(x.val[[2]][,3])
chains[[3]]<-as.mcmc(x.val[[3]][,3])
chains[[4]]<-as.mcmc(x.val[[4]][,3])
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
theta[3]
x.val[[1]][1:10,3]
x.val[[2]][1:10,3]
x.val[[3]][1:10,3]
x.val[[4]][1:10,3]
i<-14
theta <- as.numeric(para[i,2:5])
m0 <- para[i,6]
#setwd("D:/BaiduNetdiskWorkspace/陈淑丽/Master/CSC/code/24.8整理/simulation1/DATA")
yobsv <- as.matrix(read.table(paste(filenames2[i], ".csv", sep=""),
header=FALSE)[,2:3])
f_real <- f_lambda(theta[1],theta[2],theta[3],theta[4],yobsv[,1],
yobsv[,2],delta_t,n.track,nrow(yobsv))
varnames <- paste("mc", 1:10, sep="")
filenames6 <- paste("not_0betaMPSRF_lambda", 1:10000, sep="")
sd_pro<-proposal_sd(yobsv)
n0<-10000
n<-n0+2
#Given an initial value
set.seed(i)
assign(varnames[1],value=c(runif(2,0,0.1),runif(2,0,0.1)))
assign(varnames[2],value=c(runif(2,0.9,1),runif(2,0.6,log(2))))
assign(varnames[3],value=c(runif(2,0,0.1),runif(2,0.6,log(2))))
assign(varnames[4],value=c(runif(2,0.9,1),runif(2,0,0.1)))
x.val<-mcmcsample(yobsv,n.par,delta_t,n.track,n,n0,mc1,mc2,mc3,mc4,sd_pro)
chains<-NULL
chains[[1]]<-as.mcmc(x.val[[1]][,3])
chains[[2]]<-as.mcmc(x.val[[2]][,3])
chains[[3]]<-as.mcmc(x.val[[3]][,3])
chains[[4]]<-as.mcmc(x.val[[4]][,3])
MPSRF<-gelman.diag(chains,autoburnin=FALSE,multivariate = FALSE)[[1]][1]
theta[3]
x.val[[1]][1:10,3]
x.val[[2]][1:10,3]
x.val[[3]][1:10,3]
x.val[[4]][1:10,3]
source("generateddata_model.R")
n.data=37
t=24
delta_t<-t/(n.data-1)
n.par<-4
n.track=5;
N0<-1000
filenames1 <- paste("DATA", 1:10000, sep="")
para<-read.csv("para_unif.csv",header=TRUE)
for(i in 1:100)
{
set.seed(i)
theta<-as.numeric(para[i,2:5])
m0<-para[i,6]
yobsv<-generateddata_model(theta,n.data,n.track,m0,N0,delta_t)
write.table(yobsv,paste(filenames1[i], ".csv", sep=""),append=FALSE,col.names=FALSE, sep = " ",eol = "\n")
}
